{
  "openapi": "3.0.0",
  "info": {
    "title": "API cadastro de usuário e endereço",
    "description": "API de manipulação de usuário e endereço",
    "version": "1.0.0",
    "contact": {
      "name": "Marcel Brasileiro Leão de Souza",
      "email": "brasileirodev@gmail.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3333/api/v1",
      "description": "API de manipulação de usuário e endereço"
    }
  ],
  "paths": {
    "/api/v1/users": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create User",
        "description": "Route to create a new user",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserToCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInternal"
                }
              }
            }
          },
          "400": {
            "description": "Email already in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorEmailAlreadyExist"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/:id": {
      "get": {
        "tags": [
          "users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Find User by ID",
        "description": "Return a user by ID",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Return the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCompleted"
                }
              }
            }
          },
          "400": {
            "items": {
              "type": "Object",
              "properties": {
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/ErrorUserNotFound"
                    }
                  }
                }
              } 
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInternal"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update User by ID",
        "description": "Update a user by ID",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserToUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorUserNotFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInternal"
                }
              }
            }
          }
        }

      },
      "delete": {
        "tags": [
          "users"
        ],
        
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete User by ID",
        "description": "Delete a user by ID",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User deleted"
          },
          "400": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorUserNotFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInternal"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/sessions" : {
      "post": {
        "tags": [
          "sessions"
        ],
        "summary": "Login",
        "description": "Route to login",
        "operationId": "loginUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserToLogin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewSession"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInternal"
                }
              }
            }
          },
          "400": {
            "description": "Email or password invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorAuthentication"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/addresses": {
      "post": {
        "tags": [
          "addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Create Address",
        "description": "Route to create a new address",
        "operationId": "createAddress",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressToCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Address created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "401": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMissingJWT"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInternal"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Addresses",
        "description": "Route to get all addresses",
        "operationId": "getAddresses",
        "parameters": [
          {
            "name": "complement_address",
            "in": "query",
            "description": "complment address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "query",
            "description": "street address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city",
            "in": "query",
            "description": "city",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "state",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "country",
            "in": "query",
            "description": "country",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Addresses retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Address"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMissingJWT"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInternal"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/addresses/:id" :{
      "delete": {
        "tags": [
          "addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete Address by ID",
        "description": "Delete an address by ID",
        "operationId": "deleteAddress",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of address to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Address deleted"
          },
          "400": {
            "description": "Address not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorAddressNotFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInternal"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Get Address by ID",
        "description": "Get an address by ID",
        "operationId": "getAddress",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of address to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Address retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "400": {
            "description": "Address not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorAddressNotFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInternal"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "addresses"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Update Address by ID",
        "description": "Update an address by ID",
        "operationId": "updateAddress",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of address to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressToUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Address updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "400": {
            "description": "Address not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorAddressNotFound"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInternal"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserCompleted": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Marcel Brasileiro"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "brasileirodev@gmail.com"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "example": "123456"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2020-05-05T19:00:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2020-05-05T19:00:00.000Z"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "user_id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "country": {
            "type": "string",
            "example": "BR"
          },
          "address": {
            "type": "string",
            "example": "Rua dos Bobos"
          },
          "complement_address": {
            "type": "string",
            "example": "Bloco 1 - Apto 101"
          },
          "city": {
            "type": "string",
            "example": "São Paulo"
          },
          "state": {
            "type": "string",
            "example": "SP"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2020-05-05T19:00:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2020-05-05T19:00:00.000Z"
          }
        }
      },
      "AddressToCreate": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "country": {
            "type": "string",
            "example": "BR"
          },
          "address": {
            "type": "string",
            "example": "Rua dos Bobos"
          },
          "complement_address": {
            "type": "string",
            "example": "Bloco 1 - Apto 101"
          },
          "city": {
            "type": "string",
            "example": "São Paulo"
          },
          "state": {
            "type": "string",
            "example": "SP"
          }
        }
      },
      "UserToCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Marcel Brasileiro"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "brasileirodev@gmail.com"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "example": "123456"
          }
        }
      },
      "UserToUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Marcel Brasileiro",
            "required": false
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "brasileirodev@gmail.com",
            "required": false
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Marcel Brasileiro"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "brasileirodev@gmail.com"
          },
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2020-05-05T19:00:00.000Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2020-05-05T19:00:00.000Z"
          }
        }
      },
      "UserToLogin": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "brasileirodev@gmail.com"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "example": "123456"
          }
        }
      },
      "NewSession": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE2NDQzNzM5MzAsImV4cCI6MTY0NDQ2MDMzMCwic3ViIjoiNDU2ZTJmMmItYmZiOC00MGI5LWFiNjAtYTVkOWMxZDU5ZWI5In0.TGrjUSPYGbyeBkEMthWlx0DhA0dd_SVW1FIZ-iHoIS0"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "ErrorEmailAlreadyExist": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "message": {
            "type": "string",
            "example": "This email is already used"
          }
        }
      },
      "ErrorUserNotFound": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "message": {
            "type": "string",
            "example": "User not found"
          }
        }
      },
      "ErrorUserIdInvalid": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "message": {
            "type": "string",
            "example": "A user id valid is required"
          }
        }
      },
      "ErrorAddressIdInvalid": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "message": {
            "type": "string",
            "example": "Address ID not found"
          }
        }
      },
      "ErrorParamIdNotFound": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "message": {
            "type": "string",
            "example": "Param user id is required"
          }
        }
      },
      "ErrorMissingJWT": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "message": {
            "type": "string",
            "example": "JWT token is missing"
          }
        }
      },
      "ErrorAuthentication": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "message": {
            "type": "string",
            "example": "Incorrect email/password combination."
          }
        }
      },
      "ErrorInternal": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "message": {
            "type": "string",
            "example": "Internal server error"
          }
        }
      }
    }
  },
  "securitySchemas": {
    "bearerAuth": {
      "type": "http",
      "scheme": "bearer",
      "bearerFormat": "JWT"
    }
  }
}